/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.examples.helloworld111

import org.drools.examples.helloworld.HelloWorldExample.Message;
import java.util.Map
import java.util.Objects
global java.util.List list


function Boolean rate1(Map map){

    Double rate = Double.valueOf(String.valueOf(map.get("rate")));
    String type = (String) map.get("type");
    return (
        (Objects.equals(type,"软件类") && rate >= 50) ||
        (Objects.equals(type,"纯外采类") && rate >= 10) ||
        (Objects.equals(type,"外采+服务") && rate >= 14) ||
        (Objects.equals(type,"纯系统服务") && rate >= 60) ||
        (Objects.equals(type,"混合类") && rate >= 35)
    );
}

function Boolean rate2(Map map){

    Double rate = Double.valueOf(String.valueOf(map.get("rate")));
    String type = (String) map.get("type");
    return (
        (Objects.equals(type,"软件类") && rate >= 25 && rate < 50) ||
        (Objects.equals(type,"纯外采类") && rate >= 5 && rate < 10) ||
        (Objects.equals(type,"外采+服务") && rate >= 7 && rate < 14) ||
        (Objects.equals(type,"纯系统服务") && rate >= 30 && rate < 60) ||
        (Objects.equals(type,"混合类") && rate >= 17.5 && rate < 35)
    );
}


function Boolean rate3(Map map){

    Double rate = Double.valueOf(String.valueOf(map.get("rate")));
    String type = (String) map.get("type");
    return (
        (Objects.equals(type,"软件类") && rate < 25) ||
        (Objects.equals(type,"纯外采类") && rate < 5) ||
        (Objects.equals(type,"外采+服务") && rate < 7) ||
        (Objects.equals(type,"纯系统服务") && rate < 30) ||
        (Objects.equals(type,"混合类") && rate < 17.5)
    );
}

rule "rule1"
    dialect "java"
    when
        map :Map(this['money'] < 2000000 && rate1(this))
    then
        map.put("res",1);
end

rule "rule2"
    dialect "java"
    when
        map :Map(this['money'] >= 2000000 && this['money'] <= 5000000 && rate1(this))
    then
        map.put("res",2);
end


rule "rule3"
    dialect "java"
    when
        map :Map(this['money'] > 5000000 && rate1(this))
    then
        map.put("res",3);
end


// ----------------------------------------------------------------------------------------------------


rule "rule4"
    dialect "java"
    when
        map :Map(this['money'] < 2000000 && rate2(this))
    then
        map.put("res",4);
end

rule "rule5"
    dialect "java"
    when
        map :Map(this['money'] >= 2000000 && this['money'] <= 5000000 && rate2(this))
    then
        map.put("res",5);
end


rule "rule6"
    dialect "java"
    when
        map :Map(this['money'] > 5000000 && rate2(this))
    then
        map.put("res",6);
end



// ----------------------------------------------------------------------------------------------------


rule "rule7"
    dialect "java"
    when
        map :Map(this['money'] < 2000000 && rate3(this))
    then
        map.put("res",7);
end

rule "rule8"
    dialect "java"
    when
        map :Map(this['money'] >= 2000000 && this['money'] <= 5000000 && rate3(this))
    then
        map.put("res",8);
end


rule "rule9"
    dialect "java"
    when
        map :Map(this['money'] > 5000000 && rate3(this))
    then
        map.put("res",9);
end
